// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.4;

import {Test, console} from "forge-std/Test.sol";
import { MarketPrices, PriceProps } from "../../contracts/libraries/StructData.sol";

contract MockData {
  struct OracleSetPriceParams {
    address[] tokens;
    address[] providers;
    bytes[] data;
  }

  function getMarketPrices() external pure returns (MarketPrices memory marketPrices) {
    marketPrices.indexTokenPrice = PriceProps({
      min: 3386164003773116,
      max: 3386184003773116
    });
    marketPrices.longTokenPrice = PriceProps({
      min: 3386164003773116,
      max: 3386184003773116
    });
    marketPrices.shortTokenPrice = PriceProps({
      min: 1000009671490240875000000,
      max: 1000029671490240875000000
    });
  }

  function getOraclePrices() external pure returns (PriceProps[] memory) {
    PriceProps[] memory prices = new PriceProps[](2);
    prices[0] = PriceProps({
      min: 3386174003773116,
      max: 3386174003773116
    });
    prices[1] = PriceProps({
      min: 1000019671490240875000000,
      max: 1000019671490240875000000
    });

    return prices;
  }

  // got from https://arbiscan.io/tx/0xe08321308e25415fef2dbab2971f98be4ebd46f7832d4a364e2db3e8441bfb4e
  function getOracleParams() external pure returns (OracleSetPriceParams memory params) {
    params.tokens = new address[](2);
    params.tokens[0] = address(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);
    params.tokens[1] = address(0xaf88d065e77c8cC2239327C5EDb3A432268e5831);
    params.providers = new address[](2);
    params.providers[0] = address(0xF4122dF7Be4Ccd46D7397dAf2387B3A14e53d967);
    params.providers[1] = address(0xF4122dF7Be4Ccd46D7397dAf2387B3A14e53d967);
    params.data = new bytes[](2);
    params.data[0] = hex'0006f100c86a0007ed73322d6e26606c9985fd511be9d92cf5af6b3dda8143c7000000000000000000000000000000000000000000000000000000002986a911000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000030001000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000362205e10b3a147d02792eccee483dca6c7b44ecce7012cb8c6e0b68b3ae9000000000000000000000000000000000000000000000000000000006793b1c0000000000000000000000000000000000000000000000000000000006793b1c0000000000000000000000000000000000000000000000000000055f23e1ec1e4000000000000000000000000000000000000000000000000002bf1f10758831800000000000000000000000000000000000000000000000000000000679503400000000000000000000000000000000000000000000000b7921ba0083cfce0000000000000000000000000000000000000000000000000b78e0c66268fe795f00000000000000000000000000000000000000000000000b7932901466dbe0f40000000000000000000000000000000000000000000000000000000000000000633d7967524a6bf508899bf01723bb379859547188a704c8c4e0614cc0b1d2003a48183eb56521173f0a007213c0fce611d4147d62e652bf593f8a6d51cd1214c4536877484b71f7204f9cacfa01f30144719b1ba8b5afa2644568877c32b43e876d4e71afcda457494629d87ab72b4315f11ecd4d1edf752c3cb714626d287c3f6cfffda5b153c97388c11f506aba7d88cf07d8d3e31e9333208278313680e5ba4c6cd91f28ad2bcfc3f609b9965493faea9f756b3a23b4eff26cfde596bf096000000000000000000000000000000000000000000000000000000000000000661f3a7d0c9c3dce18252bc74597872bbed959f71dab21678936febe5b683ab38238c9ef426bc15f68db98012a2cb38724ea2e7d57b471746d9282522876a07ed190e0cfc3289ee8cc5fcb252e3f3ae47f6c8992ff0be1ecaf7f430b0e38628ee3743f6e6c4dc33c8d47aed9cc9299f47ac0c3e376023eebda6305cb7aac5fc804d723c1e117068691aeb050b3a7ca17a2d5789a4e89b7fecc6254e1a4262481a0852ae20ccfdea1768cada1627cc9ef21986c275ea67f8f41d3d5132e779216f';
    params.data[1] = hex'00064c28ccf99cc505d648ffcbc4c2c613859826fd4552841a6822b51800d9610000000000000000000000000000000000000000000000000000000028b2a717000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000001000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000038f83323b6b08116d1614cf33a9bd71ab5e0abf0c9f1b783a74a43e7bd992000000000000000000000000000000000000000000000000000000006793b1c0000000000000000000000000000000000000000000000000000000006793b1c0000000000000000000000000000000000000000000000000000055eec135dabc000000000000000000000000000000000000000000000000002bf0022a5cf34400000000000000000000000000000000000000000000000000000000679503400000000000000000000000000000000000000000000000000de0c682f643f4300000000000000000000000000000000000000000000000000de098fdbf2eec460000000000000000000000000000000000000000000000000de0f831cff95690000000000000000000000000000000000000000000000000000000000000000623d8fd975358d9314cf0503adc80b2c1e253b5514112d0336e6790748249112b6a2fcb0899e729d291c5fe0a8610eeaa91a5b965d42012fc5b5164e817ff6ce2ce974313865a5c921bba39003087cdafe22091ff4240dcfee829cf1e933282a173376fd8b41162257333999fb5d118af3bc0a20f7bb94e4852db6ab842001f0e43e231ed45e2d925485edd09aaecb4acedc6f56fc95d77263b0655058bc93efc005a3337e23f9d36542b2fdc42c5bf620d498ba57d1b17c068909efdbc16a5ae00000000000000000000000000000000000000000000000000000000000000062b47757b2df252df63254e77bc38ee3801a0dbf14130087ca0fcfd68e538119a75b20e1fc3070f37f41e32080309d087de2dd012906a502fa1803bc3d08291cb3aee6f390a063ee0af4ff97906389ac2dda62d15b2ac197247787d1cf58e494c60e987122683bf67a6692ddba0e23b465d57e8b1242633c4cc7a4fc4df239cb633c3409c52457f6ce211a4834aea93d435f270514b7897d2d1f3a9373a901f3331df9cf962f9cf7b4f74f9084ae67a677bdee0d8d589646e7df20cb0efd2c743';
  }

  function getParaSwapData(address receiver) external pure returns (bytes memory) {
    bytes memory rev = abi.encodePacked(receiver);
    bytes memory original = hex'000000000000000000000000def171fe48cf0115b1d80b88dc8eab59176fee5700000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000007c446c67b6d0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000002846ad2d5cbd5c28000000000000000000000000000000000000000000000000287a7d29bb1d81ed000000000000000000000000919c94b69950449cea621fd6cc0cb538de79d0dd000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000078000000000000000000000000000000000000000000000000000000000679cf4ce161d4b0c6e2e4ca381c524a0776f55710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000058a5f0b73969800faff8556cd2187e3fce71a6cb0000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000070000000000000000000000001f721e2e82f6676fce4ea07a5958cf098d339e18000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000067a62e2200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028af88d065e77c8cc2239327c5edb3a432268e583182af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000000000000000000000000000000000000000000000000000369a2fdb910d432f0a07381a5e3d27572c87671300000000000000000000000000000000000000000000000000000000000007d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000001b81d678ffb9c0263b24a97847620c99d213eb14000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000067a62e22000000000000000000000000000000000000000000000000000000000000002baf88d065e77c8cc2239327c5edb3a432268e583100006482af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';

    bytes memory result = original;

    assembly {
      let originalPtr := add(result, 0x20)
      let replacementPtr := add(rev, 0x20)

      for {let i := 0} lt(i, mload(rev)) { i := add(i, 0x20) } {
        mstore(add(originalPtr, add(304, i)), mload(add(replacementPtr, i)))
      }
    }
    require(original.length == result.length, "fail");
    return result;
  }

  function getParaSwapData_2(address receiver) external pure returns (bytes memory) {
    bytes memory rev = abi.encodePacked(receiver);
    bytes memory original = hex'000000000000000000000000def171fe48cf0115b1d80b88dc8eab59176fee5700000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000056446c67b6d0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000286524c9166933d300000000000000000000000000000000000000000000000028991bf71f8751ac00000000000000000000000005c05fc1acf6a113b2235117a5264252d61383cd00000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000066994b15cfa2c4a6f06f493098741ef2682cf0fd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000369a2fdb910d432f0a07381a5e3d27572c876713000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000066a2845e0000000000000000000000000000000000000000000000000000000000000042af88d065e77c8cc2239327c5edb3a432268e58310001f42f2a2543b76a4166549f7aab2e75bef0aefc5b0f0001f482af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';

    bytes memory result = original;

    assembly {
      let originalPtr := add(result, 0x20)
      let replacementPtr := add(rev, 0x20)

      for {let i := 0} lt(i, mload(rev)) { i := add(i, 0x20) } {
        mstore(add(originalPtr, add(304, i)), mload(add(replacementPtr, i)))
      }
    }
    require(original.length == result.length, "fail");
    return result;
  }
}
